#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LowyerDatalayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Court")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCourthearing(Courthearing instance);
    partial void UpdateCourthearing(Courthearing instance);
    partial void DeleteCourthearing(Courthearing instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertExpense(Expense instance);
    partial void UpdateExpense(Expense instance);
    partial void DeleteExpense(Expense instance);
    partial void InsertFollowUpIssue(FollowUpIssue instance);
    partial void UpdateFollowUpIssue(FollowUpIssue instance);
    partial void DeleteFollowUpIssue(FollowUpIssue instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertIssueLevel(IssueLevel instance);
    partial void UpdateIssueLevel(IssueLevel instance);
    partial void DeleteIssueLevel(IssueLevel instance);
    partial void InsertIssue(Issue instance);
    partial void UpdateIssue(Issue instance);
    partial void DeleteIssue(Issue instance);
    partial void InsertLedger(Ledger instance);
    partial void UpdateLedger(Ledger instance);
    partial void DeleteLedger(Ledger instance);
    partial void InsertLowyer(Lowyer instance);
    partial void UpdateLowyer(Lowyer instance);
    partial void DeleteLowyer(Lowyer instance);
    partial void InsertOpponent(Opponent instance);
    partial void UpdateOpponent(Opponent instance);
    partial void DeleteOpponent(Opponent instance);
    partial void InsertTheOffice(TheOffice instance);
    partial void UpdateTheOffice(TheOffice instance);
    partial void DeleteTheOffice(TheOffice instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DbDataContext() : 
				base(global::LowyerDatalayer.Properties.Settings.Default.CourtConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Courthearing> Courthearings
		{
			get
			{
				return this.GetTable<Courthearing>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Expense> Expenses
		{
			get
			{
				return this.GetTable<Expense>();
			}
		}
		
		public System.Data.Linq.Table<FollowUpIssue> FollowUpIssues
		{
			get
			{
				return this.GetTable<FollowUpIssue>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<IssueLevel> IssueLevels
		{
			get
			{
				return this.GetTable<IssueLevel>();
			}
		}
		
		public System.Data.Linq.Table<Issue> Issues
		{
			get
			{
				return this.GetTable<Issue>();
			}
		}
		
		public System.Data.Linq.Table<Ledger> Ledgers
		{
			get
			{
				return this.GetTable<Ledger>();
			}
		}
		
		public System.Data.Linq.Table<Lowyer> Lowyers
		{
			get
			{
				return this.GetTable<Lowyer>();
			}
		}
		
		public System.Data.Linq.Table<Opponent> Opponents
		{
			get
			{
				return this.GetTable<Opponent>();
			}
		}
		
		public System.Data.Linq.Table<TheOffice> TheOffices
		{
			get
			{
				return this.GetTable<TheOffice>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AccountName;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private string _AccountType;
		
		private System.Nullable<int> _CategoryId;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Issue> _Issues;
		
		private EntitySet<Ledger> _Ledgers;
		
		private EntitySet<Lowyer> _Lowyers;
		
		private EntitySet<Opponent> _Opponents;
		
		private EntitySet<TheOffice> _TheOffices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnAccountTypeChanging(string value);
    partial void OnAccountTypeChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public Account()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
			this._Ledgers = new EntitySet<Ledger>(new Action<Ledger>(this.attach_Ledgers), new Action<Ledger>(this.detach_Ledgers));
			this._Lowyers = new EntitySet<Lowyer>(new Action<Lowyer>(this.attach_Lowyers), new Action<Lowyer>(this.detach_Lowyers));
			this._Opponents = new EntitySet<Opponent>(new Action<Opponent>(this.attach_Opponents), new Action<Opponent>(this.detach_Opponents));
			this._TheOffices = new EntitySet<TheOffice>(new Action<TheOffice>(this.attach_TheOffices), new Action<TheOffice>(this.detach_TheOffices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(50)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountType", DbType="NVarChar(20)")]
		public string AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Client", Storage="_Clients", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Employee", Storage="_Employees", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Issue", Storage="_Issues", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Issue> Issues
		{
			get
			{
				return this._Issues;
			}
			set
			{
				this._Issues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Ledger", Storage="_Ledgers", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Ledger> Ledgers
		{
			get
			{
				return this._Ledgers;
			}
			set
			{
				this._Ledgers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Lowyer", Storage="_Lowyers", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Lowyer> Lowyers
		{
			get
			{
				return this._Lowyers;
			}
			set
			{
				this._Lowyers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Opponent", Storage="_Opponents", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Opponent> Opponents
		{
			get
			{
				return this._Opponents;
			}
			set
			{
				this._Opponents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_TheOffice", Storage="_TheOffices", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<TheOffice> TheOffices
		{
			get
			{
				return this._TheOffices;
			}
			set
			{
				this._TheOffices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Lowyers(Lowyer entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Lowyers(Lowyer entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Opponents(Opponent entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Opponents(Opponent entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_TheOffices(TheOffice entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_TheOffices(TheOffice entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Data.Linq.Binary _ImageX;
		
		private int _IssueId;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private EntityRef<Issue> _Issue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImageXChanging(System.Data.Linq.Binary value);
    partial void OnImageXChanged();
    partial void OnIssueIdChanging(int value);
    partial void OnIssueIdChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    #endregion
		
		public Attachment()
		{
			this._Issue = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageX", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ImageX
		{
			get
			{
				return this._ImageX;
			}
			set
			{
				if ((this._ImageX != value))
				{
					this.OnImageXChanging(value);
					this.SendPropertyChanging();
					this._ImageX = value;
					this.SendPropertyChanged("ImageX");
					this.OnImageXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueId", DbType="Int NOT NULL")]
		public int IssueId
		{
			get
			{
				return this._IssueId;
			}
			set
			{
				if ((this._IssueId != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueIdChanging(value);
					this.SendPropertyChanging();
					this._IssueId = value;
					this.SendPropertyChanged("IssueId");
					this.OnIssueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Attachment", Storage="_Issue", ThisKey="IssueId", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._IssueId = value.Id;
					}
					else
					{
						this._IssueId = default(int);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CategoryName;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Category()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ClientName;
		
		private string _Described;
		
		private string _Address;
		
		private string _IdNumber;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<int> _AccountId;
		
		private EntityRef<Client> _Client2;
		
		private EntitySet<FollowUpIssue> _FollowUpIssues;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Client> _Client1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnDescribedChanging(string value);
    partial void OnDescribedChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIdNumberChanging(string value);
    partial void OnIdNumberChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Client()
		{
			this._Client2 = default(EntityRef<Client>);
			this._FollowUpIssues = new EntitySet<FollowUpIssue>(new Action<FollowUpIssue>(this.attach_FollowUpIssues), new Action<FollowUpIssue>(this.detach_FollowUpIssues));
			this._Account = default(EntityRef<Account>);
			this._Client1 = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Client1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Described", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Described
		{
			get
			{
				return this._Described;
			}
			set
			{
				if ((this._Described != value))
				{
					this.OnDescribedChanging(value);
					this.SendPropertyChanging();
					this._Described = value;
					this.SendPropertyChanged("Described");
					this.OnDescribedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string IdNumber
		{
			get
			{
				return this._IdNumber;
			}
			set
			{
				if ((this._IdNumber != value))
				{
					this.OnIdNumberChanging(value);
					this.SendPropertyChanging();
					this._IdNumber = value;
					this.SendPropertyChanged("IdNumber");
					this.OnIdNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Client", Storage="_Client2", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public Client Client2
		{
			get
			{
				return this._Client2.Entity;
			}
			set
			{
				Client previousValue = this._Client2.Entity;
				if (((previousValue != value) 
							|| (this._Client2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client2.Entity = null;
						previousValue.Client1 = null;
					}
					this._Client2.Entity = value;
					if ((value != null))
					{
						value.Client1 = this;
					}
					this.SendPropertyChanged("Client2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_FollowUpIssue", Storage="_FollowUpIssues", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<FollowUpIssue> FollowUpIssues
		{
			get
			{
				return this._FollowUpIssues;
			}
			set
			{
				this._FollowUpIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Client", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Client", Storage="_Client1", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Client Client1
		{
			get
			{
				return this._Client1.Entity;
			}
			set
			{
				Client previousValue = this._Client1.Entity;
				if (((previousValue != value) 
							|| (this._Client1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client1.Entity = null;
						previousValue.Client2 = null;
					}
					this._Client1.Entity = value;
					if ((value != null))
					{
						value.Client2 = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Client1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FollowUpIssues(FollowUpIssue entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_FollowUpIssues(FollowUpIssue entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PersonName;
		
		private string _Phone;
		
		private string _Mobile;
		
		private System.Nullable<int> _AccountNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonNameChanging(string value);
    partial void OnPersonNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnAccountNoChanging(System.Nullable<int> value);
    partial void OnAccountNoChanged();
    #endregion
		
		public Contact()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonName", DbType="NVarChar(100)")]
		public string PersonName
		{
			get
			{
				return this._PersonName;
			}
			set
			{
				if ((this._PersonName != value))
				{
					this.OnPersonNameChanging(value);
					this.SendPropertyChanging();
					this._PersonName = value;
					this.SendPropertyChanged("PersonName");
					this.OnPersonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(20)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNo", DbType="Int")]
		public System.Nullable<int> AccountNo
		{
			get
			{
				return this._AccountNo;
			}
			set
			{
				if ((this._AccountNo != value))
				{
					this.OnAccountNoChanging(value);
					this.SendPropertyChanging();
					this._AccountNo = value;
					this.SendPropertyChanged("AccountNo");
					this.OnAccountNoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courthearings")]
	public partial class Courthearing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IssueId;
		
		private System.Nullable<System.DateTime> _StartAt;
		
		private System.Nullable<System.DateTime> _FinishAt;
		
		private string _Comment;
		
		private string _Status;
		
		private EntityRef<Issue> _Issue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIssueIdChanging(System.Nullable<int> value);
    partial void OnIssueIdChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Courthearing()
		{
			this._Issue = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueId", DbType="Int")]
		public System.Nullable<int> IssueId
		{
			get
			{
				return this._IssueId;
			}
			set
			{
				if ((this._IssueId != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueIdChanging(value);
					this.SendPropertyChanging();
					this._IssueId = value;
					this.SendPropertyChanged("IssueId");
					this.OnIssueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartAt
		{
			get
			{
				return this._StartAt;
			}
			set
			{
				if ((this._StartAt != value))
				{
					this.OnStartAtChanging(value);
					this.SendPropertyChanging();
					this._StartAt = value;
					this.SendPropertyChanged("StartAt");
					this.OnStartAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishAt
		{
			get
			{
				return this._FinishAt;
			}
			set
			{
				if ((this._FinishAt != value))
				{
					this.OnFinishAtChanging(value);
					this.SendPropertyChanging();
					this._FinishAt = value;
					this.SendPropertyChanged("FinishAt");
					this.OnFinishAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(30)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Courthearing", Storage="_Issue", ThisKey="IssueId", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.Courthearings.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.Courthearings.Add(this);
						this._IssueId = value.Id;
					}
					else
					{
						this._IssueId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EmployeeName;
		
		private string _Address;
		
		private string _IdCard;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Mobile;
		
		private System.Nullable<double> _Salary;
		
		private string _Status;
		
		private System.Nullable<int> _AccountId;
		
		private EntitySet<IssueLevel> _IssueLevels;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIdCardChanging(string value);
    partial void OnIdCardChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnSalaryChanging(System.Nullable<double> value);
    partial void OnSalaryChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Employee()
		{
			this._IssueLevels = new EntitySet<IssueLevel>(new Action<IssueLevel>(this.attach_IssueLevels), new Action<IssueLevel>(this.detach_IssueLevels));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(50)")]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCard", DbType="NVarChar(30)")]
		public string IdCard
		{
			get
			{
				return this._IdCard;
			}
			set
			{
				if ((this._IdCard != value))
				{
					this.OnIdCardChanging(value);
					this.SendPropertyChanging();
					this._IdCard = value;
					this.SendPropertyChanged("IdCard");
					this.OnIdCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Float")]
		public System.Nullable<double> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_IssueLevel", Storage="_IssueLevels", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<IssueLevel> IssueLevels
		{
			get
			{
				return this._IssueLevels;
			}
			set
			{
				this._IssueLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Employee", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IssueLevels(IssueLevel entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_IssueLevels(IssueLevel entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expense")]
	public partial class Expense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ExpenseName;
		
		private string _Description;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<System.DateTime> _ExpenseDate;
		
		private System.Nullable<int> _AccountId;
		
		private string _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExpenseNameChanging(string value);
    partial void OnExpenseNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnExpenseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpenseDateChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Expense()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenseName", DbType="NVarChar(100)")]
		public string ExpenseName
		{
			get
			{
				return this._ExpenseName;
			}
			set
			{
				if ((this._ExpenseName != value))
				{
					this.OnExpenseNameChanging(value);
					this.SendPropertyChanging();
					this._ExpenseName = value;
					this.SendPropertyChanged("ExpenseName");
					this.OnExpenseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpenseDate
		{
			get
			{
				return this._ExpenseDate;
			}
			set
			{
				if ((this._ExpenseDate != value))
				{
					this.OnExpenseDateChanging(value);
					this.SendPropertyChanging();
					this._ExpenseDate = value;
					this.SendPropertyChanged("ExpenseDate");
					this.OnExpenseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FollowUpIssue")]
	public partial class FollowUpIssue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IssueID;
		
		private System.Nullable<int> _LawyerId;
		
		private System.Nullable<int> _ClientId;
		
		private System.Nullable<int> _OpponentId;
		
		private EntitySet<IssueLevel> _IssueLevels;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Issue> _Issue;
		
		private EntityRef<Lowyer> _Lowyer;
		
		private EntityRef<Opponent> _Opponent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIssueIDChanging(System.Nullable<int> value);
    partial void OnIssueIDChanged();
    partial void OnLawyerIdChanging(System.Nullable<int> value);
    partial void OnLawyerIdChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnOpponentIdChanging(System.Nullable<int> value);
    partial void OnOpponentIdChanged();
    #endregion
		
		public FollowUpIssue()
		{
			this._IssueLevels = new EntitySet<IssueLevel>(new Action<IssueLevel>(this.attach_IssueLevels), new Action<IssueLevel>(this.detach_IssueLevels));
			this._Client = default(EntityRef<Client>);
			this._Issue = default(EntityRef<Issue>);
			this._Lowyer = default(EntityRef<Lowyer>);
			this._Opponent = default(EntityRef<Opponent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueID", DbType="Int")]
		public System.Nullable<int> IssueID
		{
			get
			{
				return this._IssueID;
			}
			set
			{
				if ((this._IssueID != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueIDChanging(value);
					this.SendPropertyChanging();
					this._IssueID = value;
					this.SendPropertyChanged("IssueID");
					this.OnIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LawyerId", DbType="Int")]
		public System.Nullable<int> LawyerId
		{
			get
			{
				return this._LawyerId;
			}
			set
			{
				if ((this._LawyerId != value))
				{
					if (this._Lowyer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLawyerIdChanging(value);
					this.SendPropertyChanging();
					this._LawyerId = value;
					this.SendPropertyChanged("LawyerId");
					this.OnLawyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentId", DbType="Int")]
		public System.Nullable<int> OpponentId
		{
			get
			{
				return this._OpponentId;
			}
			set
			{
				if ((this._OpponentId != value))
				{
					if (this._Opponent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOpponentIdChanging(value);
					this.SendPropertyChanging();
					this._OpponentId = value;
					this.SendPropertyChanged("OpponentId");
					this.OnOpponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FollowUpIssue_IssueLevel", Storage="_IssueLevels", ThisKey="Id", OtherKey="FollowUpIssueId")]
		public EntitySet<IssueLevel> IssueLevels
		{
			get
			{
				return this._IssueLevels;
			}
			set
			{
				this._IssueLevels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_FollowUpIssue", Storage="_Client", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.FollowUpIssues.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.FollowUpIssues.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_FollowUpIssue", Storage="_Issue", ThisKey="IssueID", OtherKey="Id", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.FollowUpIssues.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.FollowUpIssues.Add(this);
						this._IssueID = value.Id;
					}
					else
					{
						this._IssueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lowyer_FollowUpIssue", Storage="_Lowyer", ThisKey="LawyerId", OtherKey="Id", IsForeignKey=true)]
		public Lowyer Lowyer
		{
			get
			{
				return this._Lowyer.Entity;
			}
			set
			{
				Lowyer previousValue = this._Lowyer.Entity;
				if (((previousValue != value) 
							|| (this._Lowyer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lowyer.Entity = null;
						previousValue.FollowUpIssues.Remove(this);
					}
					this._Lowyer.Entity = value;
					if ((value != null))
					{
						value.FollowUpIssues.Add(this);
						this._LawyerId = value.Id;
					}
					else
					{
						this._LawyerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lowyer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Opponent_FollowUpIssue", Storage="_Opponent", ThisKey="OpponentId", OtherKey="Id", IsForeignKey=true)]
		public Opponent Opponent
		{
			get
			{
				return this._Opponent.Entity;
			}
			set
			{
				Opponent previousValue = this._Opponent.Entity;
				if (((previousValue != value) 
							|| (this._Opponent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Opponent.Entity = null;
						previousValue.FollowUpIssues.Remove(this);
					}
					this._Opponent.Entity = value;
					if ((value != null))
					{
						value.FollowUpIssues.Add(this);
						this._OpponentId = value.Id;
					}
					else
					{
						this._OpponentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Opponent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IssueLevels(IssueLevel entity)
		{
			this.SendPropertyChanging();
			entity.FollowUpIssue = this;
		}
		
		private void detach_IssueLevels(IssueLevel entity)
		{
			this.SendPropertyChanging();
			entity.FollowUpIssue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<System.DateTime> _LogInTime;
		
		private System.Nullable<System.DateTime> _LogOutTime;
		
		private string _ChatStatus;
		
		private string _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnLogInTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogInTimeChanged();
    partial void OnLogOutTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogOutTimeChanged();
    partial void OnChatStatusChanging(string value);
    partial void OnChatStatusChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public History()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogInTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogInTime
		{
			get
			{
				return this._LogInTime;
			}
			set
			{
				if ((this._LogInTime != value))
				{
					this.OnLogInTimeChanging(value);
					this.SendPropertyChanging();
					this._LogInTime = value;
					this.SendPropertyChanged("LogInTime");
					this.OnLogInTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogOutTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogOutTime
		{
			get
			{
				return this._LogOutTime;
			}
			set
			{
				if ((this._LogOutTime != value))
				{
					this.OnLogOutTimeChanging(value);
					this.SendPropertyChanging();
					this._LogOutTime = value;
					this.SendPropertyChanged("LogOutTime");
					this.OnLogOutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatStatus", DbType="NVarChar(50)")]
		public string ChatStatus
		{
			get
			{
				return this._ChatStatus;
			}
			set
			{
				if ((this._ChatStatus != value))
				{
					this.OnChatStatusChanging(value);
					this.SendPropertyChanging();
					this._ChatStatus = value;
					this.SendPropertyChanged("ChatStatus");
					this.OnChatStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssueLevel")]
	public partial class IssueLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LevelName;
		
		private double _TotalCost;
		
		private double _Payment;
		
		private System.Nullable<double> _Remain;
		
		private System.Nullable<System.DateTime> _TheDate;
		
		private System.Nullable<int> _EmployeeId;
		
		private string _Status;
		
		private System.Nullable<int> _FollowUpIssueId;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<FollowUpIssue> _FollowUpIssue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLevelNameChanging(string value);
    partial void OnLevelNameChanged();
    partial void OnTotalCostChanging(double value);
    partial void OnTotalCostChanged();
    partial void OnPaymentChanging(double value);
    partial void OnPaymentChanged();
    partial void OnRemainChanging(System.Nullable<double> value);
    partial void OnRemainChanged();
    partial void OnTheDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTheDateChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnFollowUpIssueIdChanging(System.Nullable<int> value);
    partial void OnFollowUpIssueIdChanged();
    #endregion
		
		public IssueLevel()
		{
			this._Employee = default(EntityRef<Employee>);
			this._FollowUpIssue = default(EntityRef<FollowUpIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LevelName
		{
			get
			{
				return this._LevelName;
			}
			set
			{
				if ((this._LevelName != value))
				{
					this.OnLevelNameChanging(value);
					this.SendPropertyChanging();
					this._LevelName = value;
					this.SendPropertyChanged("LevelName");
					this.OnLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Float NOT NULL")]
		public double TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged("TotalCost");
					this.OnTotalCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Float NOT NULL")]
		public double Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remain", DbType="Float")]
		public System.Nullable<double> Remain
		{
			get
			{
				return this._Remain;
			}
			set
			{
				if ((this._Remain != value))
				{
					this.OnRemainChanging(value);
					this.SendPropertyChanging();
					this._Remain = value;
					this.SendPropertyChanged("Remain");
					this.OnRemainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TheDate
		{
			get
			{
				return this._TheDate;
			}
			set
			{
				if ((this._TheDate != value))
				{
					this.OnTheDateChanging(value);
					this.SendPropertyChanging();
					this._TheDate = value;
					this.SendPropertyChanged("TheDate");
					this.OnTheDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowUpIssueId", DbType="Int")]
		public System.Nullable<int> FollowUpIssueId
		{
			get
			{
				return this._FollowUpIssueId;
			}
			set
			{
				if ((this._FollowUpIssueId != value))
				{
					if (this._FollowUpIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFollowUpIssueIdChanging(value);
					this.SendPropertyChanging();
					this._FollowUpIssueId = value;
					this.SendPropertyChanged("FollowUpIssueId");
					this.OnFollowUpIssueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_IssueLevel", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.IssueLevels.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.IssueLevels.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FollowUpIssue_IssueLevel", Storage="_FollowUpIssue", ThisKey="FollowUpIssueId", OtherKey="Id", IsForeignKey=true)]
		public FollowUpIssue FollowUpIssue
		{
			get
			{
				return this._FollowUpIssue.Entity;
			}
			set
			{
				FollowUpIssue previousValue = this._FollowUpIssue.Entity;
				if (((previousValue != value) 
							|| (this._FollowUpIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FollowUpIssue.Entity = null;
						previousValue.IssueLevels.Remove(this);
					}
					this._FollowUpIssue.Entity = value;
					if ((value != null))
					{
						value.IssueLevels.Add(this);
						this._FollowUpIssueId = value.Id;
					}
					else
					{
						this._FollowUpIssueId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FollowUpIssue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issues")]
	public partial class Issue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MainNumber;
		
		private int _NumberAtCourt;
		
		private int _NumberAtCourtComputer;
		
		private string _IssueType;
		
		private System.Nullable<System.DateTime> _TheDate;
		
		private System.Nullable<int> _AccountId;
		
		private EntitySet<Attachment> _Attachments;
		
		private EntitySet<Courthearing> _Courthearings;
		
		private EntitySet<FollowUpIssue> _FollowUpIssues;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMainNumberChanging(int value);
    partial void OnMainNumberChanged();
    partial void OnNumberAtCourtChanging(int value);
    partial void OnNumberAtCourtChanged();
    partial void OnNumberAtCourtComputerChanging(int value);
    partial void OnNumberAtCourtComputerChanged();
    partial void OnIssueTypeChanging(string value);
    partial void OnIssueTypeChanged();
    partial void OnTheDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTheDateChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Issue()
		{
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			this._Courthearings = new EntitySet<Courthearing>(new Action<Courthearing>(this.attach_Courthearings), new Action<Courthearing>(this.detach_Courthearings));
			this._FollowUpIssues = new EntitySet<FollowUpIssue>(new Action<FollowUpIssue>(this.attach_FollowUpIssues), new Action<FollowUpIssue>(this.detach_FollowUpIssues));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainNumber", DbType="Int NOT NULL")]
		public int MainNumber
		{
			get
			{
				return this._MainNumber;
			}
			set
			{
				if ((this._MainNumber != value))
				{
					this.OnMainNumberChanging(value);
					this.SendPropertyChanging();
					this._MainNumber = value;
					this.SendPropertyChanged("MainNumber");
					this.OnMainNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberAtCourt", DbType="Int NOT NULL")]
		public int NumberAtCourt
		{
			get
			{
				return this._NumberAtCourt;
			}
			set
			{
				if ((this._NumberAtCourt != value))
				{
					this.OnNumberAtCourtChanging(value);
					this.SendPropertyChanging();
					this._NumberAtCourt = value;
					this.SendPropertyChanged("NumberAtCourt");
					this.OnNumberAtCourtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberAtCourtComputer", DbType="Int NOT NULL")]
		public int NumberAtCourtComputer
		{
			get
			{
				return this._NumberAtCourtComputer;
			}
			set
			{
				if ((this._NumberAtCourtComputer != value))
				{
					this.OnNumberAtCourtComputerChanging(value);
					this.SendPropertyChanging();
					this._NumberAtCourtComputer = value;
					this.SendPropertyChanged("NumberAtCourtComputer");
					this.OnNumberAtCourtComputerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueType", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string IssueType
		{
			get
			{
				return this._IssueType;
			}
			set
			{
				if ((this._IssueType != value))
				{
					this.OnIssueTypeChanging(value);
					this.SendPropertyChanging();
					this._IssueType = value;
					this.SendPropertyChanged("IssueType");
					this.OnIssueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TheDate
		{
			get
			{
				return this._TheDate;
			}
			set
			{
				if ((this._TheDate != value))
				{
					this.OnTheDateChanging(value);
					this.SendPropertyChanging();
					this._TheDate = value;
					this.SendPropertyChanged("TheDate");
					this.OnTheDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Attachment", Storage="_Attachments", ThisKey="Id", OtherKey="IssueId")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Courthearing", Storage="_Courthearings", ThisKey="Id", OtherKey="IssueId")]
		public EntitySet<Courthearing> Courthearings
		{
			get
			{
				return this._Courthearings;
			}
			set
			{
				this._Courthearings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_FollowUpIssue", Storage="_FollowUpIssues", ThisKey="Id", OtherKey="IssueID")]
		public EntitySet<FollowUpIssue> FollowUpIssues
		{
			get
			{
				return this._FollowUpIssues;
			}
			set
			{
				this._FollowUpIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Issue", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Issues.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Issues.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
		
		private void attach_Courthearings(Courthearing entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_Courthearings(Courthearing entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
		
		private void attach_FollowUpIssues(FollowUpIssue entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_FollowUpIssues(FollowUpIssue entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ledger")]
	public partial class Ledger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _AccountId;
		
		private System.Nullable<System.DateTime> _ProccessDate;
		
		private System.Nullable<double> _TotalIn;
		
		private System.Nullable<double> _TotalOut;
		
		private string _AccountType;
		
		private string _MY;
		
		private string _Description;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    partial void OnProccessDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProccessDateChanged();
    partial void OnTotalInChanging(System.Nullable<double> value);
    partial void OnTotalInChanged();
    partial void OnTotalOutChanging(System.Nullable<double> value);
    partial void OnTotalOutChanged();
    partial void OnAccountTypeChanging(string value);
    partial void OnAccountTypeChanged();
    partial void OnMYChanging(string value);
    partial void OnMYChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Ledger()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProccessDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProccessDate
		{
			get
			{
				return this._ProccessDate;
			}
			set
			{
				if ((this._ProccessDate != value))
				{
					this.OnProccessDateChanging(value);
					this.SendPropertyChanging();
					this._ProccessDate = value;
					this.SendPropertyChanged("ProccessDate");
					this.OnProccessDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalIn", DbType="Float")]
		public System.Nullable<double> TotalIn
		{
			get
			{
				return this._TotalIn;
			}
			set
			{
				if ((this._TotalIn != value))
				{
					this.OnTotalInChanging(value);
					this.SendPropertyChanging();
					this._TotalIn = value;
					this.SendPropertyChanged("TotalIn");
					this.OnTotalInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalOut", DbType="Float")]
		public System.Nullable<double> TotalOut
		{
			get
			{
				return this._TotalOut;
			}
			set
			{
				if ((this._TotalOut != value))
				{
					this.OnTotalOutChanging(value);
					this.SendPropertyChanging();
					this._TotalOut = value;
					this.SendPropertyChanged("TotalOut");
					this.OnTotalOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountType", DbType="NVarChar(50)")]
		public string AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MY", DbType="NVarChar(10)")]
		public string MY
		{
			get
			{
				return this._MY;
			}
			set
			{
				if ((this._MY != value))
				{
					this.OnMYChanging(value);
					this.SendPropertyChanging();
					this._MY = value;
					this.SendPropertyChanged("MY");
					this.OnMYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Ledger", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Ledgers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Ledgers.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lowyers")]
	public partial class Lowyer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LowyerName;
		
		private string _Phone;
		
		private string _Mobile;
		
		private string _Address;
		
		private string _Description;
		
		private string _Status;
		
		private System.Nullable<int> _AccountId;
		
		private EntitySet<FollowUpIssue> _FollowUpIssues;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLowyerNameChanging(string value);
    partial void OnLowyerNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Lowyer()
		{
			this._FollowUpIssues = new EntitySet<FollowUpIssue>(new Action<FollowUpIssue>(this.attach_FollowUpIssues), new Action<FollowUpIssue>(this.detach_FollowUpIssues));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowyerName", DbType="NVarChar(100)")]
		public string LowyerName
		{
			get
			{
				return this._LowyerName;
			}
			set
			{
				if ((this._LowyerName != value))
				{
					this.OnLowyerNameChanging(value);
					this.SendPropertyChanging();
					this._LowyerName = value;
					this.SendPropertyChanged("LowyerName");
					this.OnLowyerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(20)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lowyer_FollowUpIssue", Storage="_FollowUpIssues", ThisKey="Id", OtherKey="LawyerId")]
		public EntitySet<FollowUpIssue> FollowUpIssues
		{
			get
			{
				return this._FollowUpIssues;
			}
			set
			{
				this._FollowUpIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Lowyer", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Lowyers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Lowyers.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FollowUpIssues(FollowUpIssue entity)
		{
			this.SendPropertyChanging();
			entity.Lowyer = this;
		}
		
		private void detach_FollowUpIssues(FollowUpIssue entity)
		{
			this.SendPropertyChanging();
			entity.Lowyer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Opponents")]
	public partial class Opponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OpponentName;
		
		private string _Described;
		
		private string _Address;
		
		private string _IdNumber;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<int> _AccountId;
		
		private EntitySet<FollowUpIssue> _FollowUpIssues;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOpponentNameChanging(string value);
    partial void OnOpponentNameChanged();
    partial void OnDescribedChanging(string value);
    partial void OnDescribedChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIdNumberChanging(string value);
    partial void OnIdNumberChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    #endregion
		
		public Opponent()
		{
			this._FollowUpIssues = new EntitySet<FollowUpIssue>(new Action<FollowUpIssue>(this.attach_FollowUpIssues), new Action<FollowUpIssue>(this.detach_FollowUpIssues));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OpponentName
		{
			get
			{
				return this._OpponentName;
			}
			set
			{
				if ((this._OpponentName != value))
				{
					this.OnOpponentNameChanging(value);
					this.SendPropertyChanging();
					this._OpponentName = value;
					this.SendPropertyChanged("OpponentName");
					this.OnOpponentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Described", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Described
		{
			get
			{
				return this._Described;
			}
			set
			{
				if ((this._Described != value))
				{
					this.OnDescribedChanging(value);
					this.SendPropertyChanging();
					this._Described = value;
					this.SendPropertyChanged("Described");
					this.OnDescribedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string IdNumber
		{
			get
			{
				return this._IdNumber;
			}
			set
			{
				if ((this._IdNumber != value))
				{
					this.OnIdNumberChanging(value);
					this.SendPropertyChanging();
					this._IdNumber = value;
					this.SendPropertyChanged("IdNumber");
					this.OnIdNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Opponent_FollowUpIssue", Storage="_FollowUpIssues", ThisKey="Id", OtherKey="OpponentId")]
		public EntitySet<FollowUpIssue> FollowUpIssues
		{
			get
			{
				return this._FollowUpIssues;
			}
			set
			{
				this._FollowUpIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Opponent", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Opponents.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Opponents.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FollowUpIssues(FollowUpIssue entity)
		{
			this.SendPropertyChanging();
			entity.Opponent = this;
		}
		
		private void detach_FollowUpIssues(FollowUpIssue entity)
		{
			this.SendPropertyChanging();
			entity.Opponent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TheOffice")]
	public partial class TheOffice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OfficeName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Mobille;
		
		private string _Fax;
		
		private System.Nullable<int> _AccountId;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOfficeNameChanging(string value);
    partial void OnOfficeNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobilleChanging(string value);
    partial void OnMobilleChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAccountIdChanging(System.Nullable<int> value);
    partial void OnAccountIdChanged();
    #endregion
		
		public TheOffice()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeName", DbType="NVarChar(50)")]
		public string OfficeName
		{
			get
			{
				return this._OfficeName;
			}
			set
			{
				if ((this._OfficeName != value))
				{
					this.OnOfficeNameChanging(value);
					this.SendPropertyChanging();
					this._OfficeName = value;
					this.SendPropertyChanged("OfficeName");
					this.OnOfficeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobille", DbType="NVarChar(50)")]
		public string Mobille
		{
			get
			{
				return this._Mobille;
			}
			set
			{
				if ((this._Mobille != value))
				{
					this.OnMobilleChanging(value);
					this.SendPropertyChanging();
					this._Mobille = value;
					this.SendPropertyChanged("Mobille");
					this.OnMobilleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int")]
		public System.Nullable<int> AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_TheOffice", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.TheOffices.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.TheOffices.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _UserPassword;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Email;
		
		private string _Gender;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
